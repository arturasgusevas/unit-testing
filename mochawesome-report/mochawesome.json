{
  "stats": {
    "suites": 4,
    "tests": 14,
    "passes": 12,
    "pending": 0,
    "failures": 2,
    "start": "2024-04-26T09:48:06.752Z",
    "end": "2024-04-26T09:48:06.845Z",
    "duration": 93,
    "testsRegistered": 14,
    "passPercent": 85.71428571428571,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "3c36c2b5-c82b-4067-a129-24aacb723f0b",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "dae84249-f114-4b1b-adf8-069a1ce4f0ed",
          "title": "getEvenNumbersFromArray",
          "fullFile": "C:\\Users\\Arturas\\PROJECTS\\UnitTesting\\test\\numbers-validator\\getEvenNumbersFromArray.spec.js",
          "file": "\\test\\numbers-validator\\getEvenNumbersFromArray.spec.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"getEvenNumbersFromArray\"",
              "fullTitle": "getEvenNumbersFromArray \"before each\" hook in \"getEvenNumbersFromArray\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "validator = new NumbersValidator();",
              "err": {},
              "uuid": "1a1f4b37-2236-4449-9498-c4fa984d5c1b",
              "parentUUID": "dae84249-f114-4b1b-adf8-069a1ce4f0ed",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"getEvenNumbersFromArray\"",
              "fullTitle": "getEvenNumbersFromArray \"after each\" hook in \"getEvenNumbersFromArray\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "validator = null;",
              "err": {},
              "uuid": "26dd4ed2-d397-464c-ae7a-ecbd18b18282",
              "parentUUID": "dae84249-f114-4b1b-adf8-069a1ce4f0ed",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should return only even numbers from a mixed array",
              "fullTitle": "getEvenNumbersFromArray should return only even numbers from a mixed array",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const validationResults = validator.getEvenNumbersFromArray([\n  1, 2, 3, 4, 5, 6\n]);\nexpect(validationResults).to.deep.equal([2, 4, 6]);",
              "err": {},
              "uuid": "c848cfd6-5c9d-4671-a0df-85cabb44a6a3",
              "parentUUID": "dae84249-f114-4b1b-adf8-069a1ce4f0ed",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return the same array if all elements are even",
              "fullTitle": "getEvenNumbersFromArray should return the same array if all elements are even",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const validationResults = validator.getEvenNumbersFromArray([2, 4, 6]);\nexpect(validationResults).to.deep.equal([2, 4, 6]);",
              "err": {},
              "uuid": "5abab410-d614-4909-9a74-ce1c218a536a",
              "parentUUID": "dae84249-f114-4b1b-adf8-069a1ce4f0ed",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return an empty array if all elements are odd",
              "fullTitle": "getEvenNumbersFromArray should return an empty array if all elements are odd",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const validationResults = validator.getEvenNumbersFromArray([1, 3, 5]);\nexpect(validationResults).to.deep.equal([]);",
              "err": {},
              "uuid": "21d844b7-a14d-4b45-80b8-eae0bf3e3676",
              "parentUUID": "dae84249-f114-4b1b-adf8-069a1ce4f0ed",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return an empty array if the input array is empty",
              "fullTitle": "getEvenNumbersFromArray should return an empty array if the input array is empty",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const validationResults = validator.getEvenNumbersFromArray([]);\nexpect(validationResults).to.deep.equal([]);",
              "err": {},
              "uuid": "d2e695e8-6342-4597-bd34-da9430c10fcb",
              "parentUUID": "dae84249-f114-4b1b-adf8-069a1ce4f0ed",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw an error when contains non-number elements",
              "fullTitle": "getEvenNumbersFromArray should throw an error when contains non-number elements",
              "timedOut": false,
              "duration": 8,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "expect(() => {\n  validator.getEvenNumbersFromArray([1, 'two', 3]);\n}).to.throw('[4] is not an array of \"Numbers\"');",
              "err": {
                "message": "AssertionError: expected [Function] to throw error including '[4] is not an array of \"Numbers\"' but got '[1,two,3] is not an array of \\'Number…'",
                "estack": "AssertionError: expected [Function] to throw error including '[4] is not an array of \"Numbers\"' but got '[1,two,3] is not an array of \\'Number…'\n    at Context.<anonymous> (file:///C:/Users/Arturas/PROJECTS/UnitTesting/test/numbers-validator/getEvenNumbersFromArray.spec.js:41:16)\n    at process.processImmediate (node:internal/timers:478:21)",
                "diff": "- [1,two,3] is not an array of 'Numbers'\n+ [4] is not an array of \"Numbers\"\n"
              },
              "uuid": "8c5eb9b9-929b-42be-9131-01eb03ab30bc",
              "parentUUID": "dae84249-f114-4b1b-adf8-069a1ce4f0ed",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c848cfd6-5c9d-4671-a0df-85cabb44a6a3",
            "5abab410-d614-4909-9a74-ce1c218a536a",
            "21d844b7-a14d-4b45-80b8-eae0bf3e3676",
            "d2e695e8-6342-4597-bd34-da9430c10fcb"
          ],
          "failures": [
            "8c5eb9b9-929b-42be-9131-01eb03ab30bc"
          ],
          "pending": [],
          "skipped": [],
          "duration": 15,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "4b83e27d-f539-47f8-b041-af30e879ea83",
          "title": "isAllNumbers",
          "fullFile": "C:\\Users\\Arturas\\PROJECTS\\UnitTesting\\test\\numbers-validator\\isAllNumbers.spec.js",
          "file": "\\test\\numbers-validator\\isAllNumbers.spec.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"isAllNumbers\"",
              "fullTitle": "isAllNumbers \"before each\" hook in \"isAllNumbers\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "validator = new NumbersValidator();",
              "err": {},
              "uuid": "c1c8db54-0f72-45a3-98a7-31c0eb56ad74",
              "parentUUID": "4b83e27d-f539-47f8-b041-af30e879ea83",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"isAllNumbers\"",
              "fullTitle": "isAllNumbers \"after each\" hook in \"isAllNumbers\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "validator = null;",
              "err": {},
              "uuid": "d706244c-4e75-476e-8163-5f10a5086a68",
              "parentUUID": "4b83e27d-f539-47f8-b041-af30e879ea83",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should return true if all elements are numbers",
              "fullTitle": "isAllNumbers should return true if all elements are numbers",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const validationResults = validator.isAllNumbers([1, 2, 3, 4]);\nexpect(validationResults).to.be.equal(true);",
              "err": {},
              "uuid": "9b646252-f879-4d01-85b2-3e6668bb1619",
              "parentUUID": "4b83e27d-f539-47f8-b041-af30e879ea83",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return false if all elements are not numbers",
              "fullTitle": "isAllNumbers should return false if all elements are not numbers",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const validationResults = validator.isAllNumbers([1, 2, '3', 4]);\nexpect(validationResults).to.be.equal(false);",
              "err": {},
              "uuid": "a26bd8f8-98fe-47bd-99df-cec6964d1edb",
              "parentUUID": "4b83e27d-f539-47f8-b041-af30e879ea83",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw an error when provided a string",
              "fullTitle": "isAllNumbers should throw an error when provided a string",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "expect(() => {\n  validator.isAllNumbers('4');\n}).to.throw('[4] is not a number');",
              "err": {
                "message": "AssertionError: expected [Function] to throw error including '[4] is not a number' but got '[4] is not an array'",
                "estack": "AssertionError: expected [Function] to throw error including '[4] is not a number' but got '[4] is not an array'\n    at Context.<anonymous> (file:///C:/Users/Arturas/PROJECTS/UnitTesting/test/numbers-validator/isAllNumbers.spec.js:29:16)\n    at process.processImmediate (node:internal/timers:478:21)",
                "diff": "- [4] is not an array\n+ [4] is not a number\n"
              },
              "uuid": "282dafbc-766d-4fa9-a695-b0ed77317214",
              "parentUUID": "4b83e27d-f539-47f8-b041-af30e879ea83",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "9b646252-f879-4d01-85b2-3e6668bb1619",
            "a26bd8f8-98fe-47bd-99df-cec6964d1edb"
          ],
          "failures": [
            "282dafbc-766d-4fa9-a695-b0ed77317214"
          ],
          "pending": [],
          "skipped": [],
          "duration": 6,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "25a8c40e-6f6f-4df2-8a6d-7c80a4d61ebe",
          "title": "isInteger",
          "fullFile": "C:\\Users\\Arturas\\PROJECTS\\UnitTesting\\test\\numbers-validator\\isInteger.spec.js",
          "file": "\\test\\numbers-validator\\isInteger.spec.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"isInteger\"",
              "fullTitle": "isInteger \"before each\" hook in \"isInteger\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "validator = new NumbersValidator();",
              "err": {},
              "uuid": "668688a1-ea56-4622-8958-3b806dc8e6bb",
              "parentUUID": "25a8c40e-6f6f-4df2-8a6d-7c80a4d61ebe",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"isInteger\"",
              "fullTitle": "isInteger \"after each\" hook in \"isInteger\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "validator = null;",
              "err": {},
              "uuid": "357633be-84ff-4475-8c88-5b2fa7e01b21",
              "parentUUID": "25a8c40e-6f6f-4df2-8a6d-7c80a4d61ebe",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should return true if value is integer",
              "fullTitle": "isInteger should return true if value is integer",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const validationResults = validator.isInteger(4);\nexpect(validationResults).to.be.equal(true);",
              "err": {},
              "uuid": "173d04bd-ddea-4dd1-a363-9f500f9b3bdf",
              "parentUUID": "25a8c40e-6f6f-4df2-8a6d-7c80a4d61ebe",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return false if value is not integer",
              "fullTitle": "isInteger should return false if value is not integer",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const validationResults = validator.isInteger(4.5);\nexpect(validationResults).to.be.equal(false);",
              "err": {},
              "uuid": "042e6e46-ca31-44ea-8834-0921aa2d6e6a",
              "parentUUID": "25a8c40e-6f6f-4df2-8a6d-7c80a4d61ebe",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw an error when provided a string",
              "fullTitle": "isInteger should throw an error when provided a string",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => {\n  validator.isInteger('abc');\n}).to.throw('[abc] is not a number');",
              "err": {},
              "uuid": "00653854-3cd9-436c-b1f5-3a42652f1491",
              "parentUUID": "25a8c40e-6f6f-4df2-8a6d-7c80a4d61ebe",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "173d04bd-ddea-4dd1-a363-9f500f9b3bdf",
            "042e6e46-ca31-44ea-8834-0921aa2d6e6a",
            "00653854-3cd9-436c-b1f5-3a42652f1491"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "28d4b55d-5b27-4726-9c05-e5363130c0ad",
          "title": "isNumberEven positive tests",
          "fullFile": "C:\\Users\\Arturas\\PROJECTS\\UnitTesting\\test\\numbers-validator\\isNumberEven.spec.js",
          "file": "\\test\\numbers-validator\\isNumberEven.spec.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"isNumberEven positive tests\"",
              "fullTitle": "isNumberEven positive tests \"before each\" hook in \"isNumberEven positive tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "validator = new NumbersValidator();",
              "err": {},
              "uuid": "2478394a-701c-4c75-94bb-800b48610bd5",
              "parentUUID": "28d4b55d-5b27-4726-9c05-e5363130c0ad",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"isNumberEven positive tests\"",
              "fullTitle": "isNumberEven positive tests \"after each\" hook in \"isNumberEven positive tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "validator = null;",
              "err": {},
              "uuid": "722088c0-bd93-442f-bc7b-afcce80a702b",
              "parentUUID": "28d4b55d-5b27-4726-9c05-e5363130c0ad",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should return true if number is even",
              "fullTitle": "isNumberEven positive tests should return true if number is even",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const validationResults = validator.isNumberEven(4);\nexpect(validationResults).to.be.equal(true);",
              "err": {},
              "uuid": "b1008880-d0ae-452f-883c-de395f85ef4a",
              "parentUUID": "28d4b55d-5b27-4726-9c05-e5363130c0ad",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return false if number is even",
              "fullTitle": "isNumberEven positive tests should return false if number is even",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const validationResults = validator.isNumberEven(5);\nexpect(validationResults).to.be.equal(false);",
              "err": {},
              "uuid": "ec9992ba-a800-4ee1-a884-e2e278686480",
              "parentUUID": "28d4b55d-5b27-4726-9c05-e5363130c0ad",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw an error when provided a string",
              "fullTitle": "isNumberEven positive tests should throw an error when provided a string",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => {\n  validator.isNumberEven('4');\n}).to.throw('[4] is not of type \"Number\" it is of type \"string\"');",
              "err": {},
              "uuid": "d77ea679-1787-4bc0-afa1-e6f8c5a5cc10",
              "parentUUID": "28d4b55d-5b27-4726-9c05-e5363130c0ad",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b1008880-d0ae-452f-883c-de395f85ef4a",
            "ec9992ba-a800-4ee1-a884-e2e278686480",
            "d77ea679-1787-4bc0-afa1-e6f8c5a5cc10"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.4.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}